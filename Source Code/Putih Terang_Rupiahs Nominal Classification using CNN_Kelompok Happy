{"cells":[{"cell_type":"markdown","metadata":{"id":"4pEdPsQHAW9O"},"source":["# Import Library"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KW3bl-wb7hPw"},"outputs":[],"source":["# Import Required Library\n","# libraries for the files in google drive\n","from pydrive.auth import GoogleAuth\n","from google.colab import drive\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials"]},{"cell_type":"markdown","metadata":{"id":"OOc5uMzlAdN8"},"source":["# Data Exploration"]},{"cell_type":"markdown","metadata":{"id":"HnCms4Hhj_JE"},"source":["## Connect to Google Drive"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":59048,"status":"ok","timestamp":1671377040945,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"5xxHn1JCAfvn","outputId":"9c3087d8-3355-4739-8109-14c026feb88c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["# Connect to Google Drive\n","from google.colab import drive\n","import os\n","\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"GwYucm1zkFPO"},"source":["## Prepare Directory"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1671377040946,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"NusQUDkziNXQ","outputId":"88fe5523-51b4-430b-ae0d-8cc1c448bbc6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Data  Train  Validation\n"]}],"source":["# Making Directory\n","base_dir = '/content/drive/My Drive/Data Rupiah/Putih Terang'\n","!ls \"/content/drive/My Drive/Data Rupiah/Putih Terang\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"X0fvt7NRkSRq"},"outputs":[],"source":["# Define Directory\n","database_dir = os.path.join(base_dir, \"Data\")\n","train_dir = os.path.join(base_dir, \"Train\")\n","validation_dir = os.path.join(base_dir, \"Validation\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gbW1HHy4lL5C"},"outputs":[],"source":["# Define Directory Database\n","seribu_dir = os.path.join(database_dir, '1000/')\n","duaribu_dir = os.path.join(database_dir, '2000/')\n","limaribu_dir = os.path.join(database_dir, '5000/')\n","sepuluhribu_dir = os.path.join(database_dir, '10000/')\n","duapuluhribu_dir = os.path.join(database_dir, '20000/')\n","limapuluhribu_dir = os.path.join(database_dir, '50000/')\n","seratusribu_dir = os.path.join(database_dir, '100000/')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5928,"status":"ok","timestamp":1671377046870,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"zAyNpw1El9s7","outputId":"1768c9ab-eb71-4dce-b789-019795e67fd1"},"outputs":[{"name":"stdout","output_type":"stream","text":["Total Data each Class\n","Total Data Rp1000 : 128\n","Total Data Rp2000 : 128\n","Total Data Rp5000 : 128\n","Total Data Rp10000 : 128\n","Total Data Rp20000 : 128\n","Total Data Rp50000 : 128\n","Total Data Rp100000 : 128\n"]}],"source":["print(\"Total Data each Class\")\n","print(\"Total Data Rp1000 :\", len(os.listdir(seribu_dir)))\n","print(\"Total Data Rp2000 :\", len(os.listdir(duaribu_dir)))\n","print(\"Total Data Rp5000 :\", len(os.listdir(limaribu_dir)))\n","print(\"Total Data Rp10000 :\", len(os.listdir(sepuluhribu_dir)))\n","print(\"Total Data Rp20000 :\", len(os.listdir(duapuluhribu_dir)))\n","print(\"Total Data Rp50000 :\", len(os.listdir(limapuluhribu_dir)))\n","print(\"Total Data Rp100000 :\", len(os.listdir(seratusribu_dir)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tIw3xCmjebi0"},"outputs":[],"source":["# Directory for Training \n","train_seribu = os.path.join(train_dir, '1000/')\n","train_duaribu = os.path.join(train_dir, '2000/')\n","train_limaribu = os.path.join(train_dir, '5000/')\n","train_sepuluhribu = os.path.join(train_dir, '10000/')\n","train_duapuluhribu = os.path.join(train_dir, '20000/')\n","train_limapuluhribu = os.path.join(train_dir, '50000/')\n","train_seratusribu = os.path.join(train_dir, '100000/')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q0LvI7POexdz"},"outputs":[],"source":["# Directory for Validation\n","validation_seribu = os.path.join(validation_dir, '1000/')\n","validation_duaribu = os.path.join(validation_dir, '2000/')\n","validation_limaribu = os.path.join(validation_dir, '5000/')\n","validation_sepuluhribu = os.path.join(validation_dir, '10000/')\n","validation_duapuluhribu = os.path.join(validation_dir, '20000/')\n","validation_limapuluhribu = os.path.join(validation_dir, '50000/')\n","validation_seratusribu = os.path.join(validation_dir, '100000/')"]},{"cell_type":"markdown","metadata":{"id":"1VrFlUC8ieel"},"source":["## Data Preparation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3xmzm9fTALAA"},"outputs":[],"source":["import random\n","from shutil import copyfile"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5WkMokB7g7Cf"},"outputs":[],"source":["def train_val_split(source, train, val, train_ratio):\n","  total_size = len(os.listdir(source))\n","  train_size = int(train_ratio * total_size)\n","  val_size = total_size - train_size\n","\n","  randomized = random.sample(os.listdir(source), total_size)\n","  train_files = randomized[0:train_size]\n","  val_files = randomized[train_size:total_size]\n","\n","  for i in train_files:\n","    i_files = source + i\n","    destination = train + i\n","    copyfile(i_files, destination)\n","\n","  for i in val_files:\n","    i_files = source + i\n","    destination = val + i\n","    copyfile(i_files, destination)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IErrLBZigyWT"},"outputs":[],"source":["# Distribution Data Training and Testing\n","train_ratio = 0.8"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-gdWAzZykSEK"},"outputs":[],"source":["# Distribution Data Training and Validation\n","# 1000\n","source_00 = seribu_dir\n","train_00 = train_seribu\n","val_00 = validation_seribu\n","train_val_split(source_00, train_00, val_00, train_ratio)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1671377050305,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"SM2hU0EZlc6j","outputId":"683686c2-5462-46c1-8d4a-6bd68f076bdd"},"outputs":[{"name":"stdout","output_type":"stream","text":["Total Data Rp1000          :  128\n","Total Train Rp1000         :  102\n","Total Validation Rp1000    :  26\n"]}],"source":["print(\"Total Data Rp1000          : \", len(os.listdir(seribu_dir)))\n","print(\"Total Train Rp1000         : \", len(os.listdir(train_seribu)))\n","print(\"Total Validation Rp1000    : \", len(os.listdir(validation_seribu)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8K-XNTYmkT5j"},"outputs":[],"source":["# 2000\n","source_01 = duaribu_dir\n","train_01 = train_duaribu\n","val_01 = validation_duaribu\n","train_val_split(source_01, train_01, val_01, train_ratio)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1671377053979,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"2euZHyxSmEQu","outputId":"55d27a50-4c43-484f-c2d6-6f6c28242f86"},"outputs":[{"name":"stdout","output_type":"stream","text":["Total Data Rp2000          :  128\n","Total Train Rp2000         :  102\n","Total Validation Rp2000    :  26\n"]}],"source":["print(\"Total Data Rp2000          : \", len(os.listdir(duaribu_dir)))\n","print(\"Total Train Rp2000         : \", len(os.listdir(train_duaribu)))\n","print(\"Total Validation Rp2000    : \", len(os.listdir(validation_duaribu)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7MS4YN3ckWTl"},"outputs":[],"source":["# 5000\n","source_02 = limaribu_dir\n","train_02 = train_limaribu\n","val_02 = validation_limaribu\n","train_val_split(source_02, train_02, val_02, train_ratio)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1671377057098,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"ksJJg2hOmFbP","outputId":"40eae82b-b285-441b-e929-97cbe779a3b4"},"outputs":[{"name":"stdout","output_type":"stream","text":["Total Data Rp5000          :  128\n","Total Train Rp5000         :  102\n","Total Validation Rp5000    :  26\n"]}],"source":["print(\"Total Data Rp5000          : \", len(os.listdir(limaribu_dir)))\n","print(\"Total Train Rp5000         : \", len(os.listdir(train_limaribu)))\n","print(\"Total Validation Rp5000    : \", len(os.listdir(validation_limaribu)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SLnfQyeYkW4q"},"outputs":[],"source":["# 10000\n","source_03 = sepuluhribu_dir\n","train_03 = train_sepuluhribu\n","val_03 = validation_sepuluhribu\n","train_val_split(source_03, train_03, val_03, train_ratio)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1671377060867,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"Sf7rMLb4mGQ4","outputId":"ff95222b-8f2a-4995-c7d3-93d86c21dc8f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Total Data Rp10000          :  128\n","Total Train Rp10000         :  102\n","Total Validation Rp10000    :  26\n"]}],"source":["print(\"Total Data Rp10000          : \", len(os.listdir(sepuluhribu_dir)))\n","print(\"Total Train Rp10000         : \", len(os.listdir(train_sepuluhribu)))\n","print(\"Total Validation Rp10000    : \", len(os.listdir(validation_sepuluhribu)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LfUM9frIkXjp"},"outputs":[],"source":["# 20000\n","source_04 = duapuluhribu_dir\n","train_04 = train_duapuluhribu\n","val_04 = validation_duapuluhribu\n","train_val_split(source_04, train_04, val_04, train_ratio)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1671377064024,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"OoJMEn_VmHS0","outputId":"7f4c8614-7c67-439c-ada3-67ee480c8be0"},"outputs":[{"name":"stdout","output_type":"stream","text":["Total Data Rp20000          :  128\n","Total Train Rp20000         :  102\n","Total Validation Rp20000    :  26\n"]}],"source":["print(\"Total Data Rp20000          : \", len(os.listdir(duapuluhribu_dir)))\n","print(\"Total Train Rp20000         : \", len(os.listdir(train_duapuluhribu)))\n","print(\"Total Validation Rp20000    : \", len(os.listdir(validation_duapuluhribu)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cljVcsTNkaGY"},"outputs":[],"source":["# 50000\n","source_05 = limapuluhribu_dir\n","train_05 = train_limapuluhribu\n","val_05 = validation_limapuluhribu\n","train_val_split(source_05, train_05, val_05, train_ratio)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1671377067257,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"65c6tDGxmIFV","outputId":"efd6786a-f972-48be-ba00-6488cc6a597a"},"outputs":[{"name":"stdout","output_type":"stream","text":["Total Data Rp50000          :  128\n","Total Train Rp50000         :  102\n","Total Validation Rp50000    :  26\n"]}],"source":["print(\"Total Data Rp50000          : \", len(os.listdir(limapuluhribu_dir)))\n","print(\"Total Train Rp50000         : \", len(os.listdir(train_limapuluhribu)))\n","print(\"Total Validation Rp50000    : \", len(os.listdir(validation_limapuluhribu)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Zl3BkS-AkamF"},"outputs":[],"source":["# 100000\n","source_06 = seratusribu_dir\n","train_06 = train_seratusribu\n","val_06 = validation_seratusribu\n","train_val_split(source_06, train_06, val_06, train_ratio)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1671377070575,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"VfVADSBsmI5q","outputId":"4aad8f88-1fff-4e8b-eff9-8f7d3a7f1b3e"},"outputs":[{"name":"stdout","output_type":"stream","text":["Total Data Rp100000          :  128\n","Total Train Rp100000         :  102\n","Total Validation Rp100000    :  26\n"]}],"source":["print(\"Total Data Rp100000          : \", len(os.listdir(seratusribu_dir)))\n","print(\"Total Train Rp100000         : \", len(os.listdir(train_seratusribu)))\n","print(\"Total Validation Rp100000    : \", len(os.listdir(validation_seratusribu)))"]},{"cell_type":"markdown","metadata":{"id":"NpY5GTsZg0AI"},"source":["## Data Preprocessing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CuAsVyprg3n1"},"outputs":[],"source":["import tensorflow as tf\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZmZV864ZqGB_"},"outputs":[],"source":["train_datagen = ImageDataGenerator(\n","    rescale = 1./255,\n","    rotation_range = 30,\n","    horizontal_flip = True,\n","    # shear_range = 0.3,\n","    # fill_mode = 'nearest',\n","    # width_shift_range = 0.2,\n","    # height_shift_range = 0.2,\n","    zoom_range = 0.1\n",")\n","\n","val_datagen = ImageDataGenerator(\n","    rescale = 1./255,\n","    rotation_range = 30,\n","    horizontal_flip = True,\n","    # shear_range = 0.3,\n","    # fill_mode = 'nearest',\n","    # width_shift_range = 0.2,\n","    # height_shift_range = 0.2,\n","    zoom_range = 0.1\n",")"]},{"cell_type":"markdown","metadata":{"id":"K4Tue-t2rqtO"},"source":["### Target"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1671377073847,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"_tANSTrHrPsf","outputId":"1b346a11-685b-4852-e389-177670134c9f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Found 714 images belonging to 7 classes.\n","Found 182 images belonging to 7 classes.\n"]}],"source":["train_generator = train_datagen.flow_from_directory(\n","    train_dir,\n","    target_size = (256, 256),\n","    batch_size = 7,\n","    class_mode = 'categorical'\n",")\n","\n","val_generator = val_datagen.flow_from_directory(\n","    validation_dir,\n","    target_size = (256, 256),\n","    batch_size = 7,\n","    class_mode = 'categorical'\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wjyR4hsfroQ5"},"outputs":[],"source":["class myCallback(tf.keras.callbacks.Callback):\n","  def on_epoch_end(self, epoch, logs = ()):\n","    if(logs.get('accuracy') \u003e 0.99):\n","      print('/nAccuracy reach 99%')\n","      self.model.stop_training = True\n","\n","callbacks = myCallback()"]},{"cell_type":"markdown","metadata":{"id":"gxc9cM0AAgbD"},"source":["# Build Model CNN"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d2JRG51jAibo"},"outputs":[],"source":["model = tf.keras.models.Sequential([\n","# Layer Konvolusi Pertama\n","tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(256, 256, 3)),\n","tf.keras.layers.MaxPooling2D(2, 2),\n","\n","# Layer Konvolusi Kedua\n","tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n","tf.keras.layers.MaxPooling2D(2, 2),\n","\n","# Layer Konvolusi Ketiga\n","tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n","tf.keras.layers.MaxPooling2D(2, 2),\n","\n","# Layer Konvolusi Keempat\n","tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n","tf.keras.layers.MaxPooling2D(2, 2),\n","\n","# Layer Konvolusi Kelima\n","tf.keras.layers.Conv2D(256, (3,3), activation='relu'),\n","tf.keras.layers.MaxPooling2D(2, 2),\n","\n","# Lakukan Flatten\n","tf.keras.layers.Flatten(),\n","\n","# Lakukan fully connected layer\n","tf.keras.layers.Dense(512, activation='relu'),\n","tf.keras.layers.Dropout(0.5),\n","tf.keras.layers.Dense(7,activation='sigmoid')\n","])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":42,"status":"ok","timestamp":1671377074478,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"li_X2WYBHbkX","outputId":"333dfbe4-9026-4dee-e5a0-357c5912142f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 254, 254, 16)      448       \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 127, 127, 16)     0         \n"," )                                                               \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 125, 125, 32)      4640      \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 62, 62, 32)       0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 60, 60, 64)        18496     \n","                                                                 \n"," max_pooling2d_2 (MaxPooling  (None, 30, 30, 64)       0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_3 (Conv2D)           (None, 28, 28, 128)       73856     \n","                                                                 \n"," max_pooling2d_3 (MaxPooling  (None, 14, 14, 128)      0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_4 (Conv2D)           (None, 12, 12, 256)       295168    \n","                                                                 \n"," max_pooling2d_4 (MaxPooling  (None, 6, 6, 256)        0         \n"," 2D)                                                             \n","                                                                 \n"," flatten (Flatten)           (None, 9216)              0         \n","                                                                 \n"," dense (Dense)               (None, 512)               4719104   \n","                                                                 \n"," dropout (Dropout)           (None, 512)               0         \n","                                                                 \n"," dense_1 (Dense)             (None, 7)                 3591      \n","                                                                 \n","=================================================================\n","Total params: 5,115,303\n","Trainable params: 5,115,303\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["model.summary()"]},{"cell_type":"markdown","metadata":{"id":"GQBRJpu4HLZL"},"source":["# Compile and Train the Model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r9JqNbrVHh2u"},"outputs":[],"source":["model.compile(optimizer='Adam', \n","             loss='categorical_crossentropy',\n","             metrics=['accuracy'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":131125,"status":"ok","timestamp":1671378380974,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"rQ5Mcq12OGlj","outputId":"201a7c3e-32af-4cee-dbbc-c6346c17310d"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/80\n","6/6 [==============================] - 13s 2s/step - loss: 0.1158 - accuracy: 0.9286 - val_loss: 0.0605 - val_accuracy: 1.0000\n","Epoch 2/80\n","6/6 [==============================] - 11s 2s/step - loss: 0.1346 - accuracy: 0.9286 - val_loss: 0.7586 - val_accuracy: 0.7143\n","Epoch 3/80\n","6/6 [==============================] - 11s 2s/step - loss: 0.6734 - accuracy: 0.8095 - val_loss: 0.3630 - val_accuracy: 0.8571\n","Epoch 4/80\n","6/6 [==============================] - 11s 2s/step - loss: 0.4480 - accuracy: 0.8571 - val_loss: 0.4807 - val_accuracy: 0.8571\n","Epoch 5/80\n","6/6 [==============================] - 12s 2s/step - loss: 0.2860 - accuracy: 0.9286 - val_loss: 0.0305 - val_accuracy: 1.0000\n","Epoch 6/80\n","6/6 [==============================] - 11s 2s/step - loss: 0.1966 - accuracy: 0.9524 - val_loss: 0.1739 - val_accuracy: 0.8571\n","Epoch 7/80\n","6/6 [==============================] - 11s 2s/step - loss: 0.1406 - accuracy: 0.9286 - val_loss: 0.0361 - val_accuracy: 1.0000\n","Epoch 8/80\n","6/6 [==============================] - ETA: 0s - loss: 0.0939 - accuracy: 1.0000/nAccuracy reach 99%\n","6/6 [==============================] - 11s 2s/step - loss: 0.0939 - accuracy: 1.0000 - val_loss: 0.0103 - val_accuracy: 1.0000\n"]}],"source":["history = model.fit(train_generator,\n","                    steps_per_epoch = 6,\n","                    epochs = 80, \n","                    validation_data = val_generator,\n","                    validation_steps = 1,\n","                    verbose = 1,\n","                    callbacks = [callbacks]\n","                    )"]},{"cell_type":"markdown","metadata":{"id":"ZyqhobY6Ai-A"},"source":["# Evaluate the Model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DOQn6jCYuZC6"},"outputs":[],"source":["%matplotlib inline\n","\n","import matplotlib.image as mpimg\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"00u6ZYvwuifh"},"outputs":[],"source":["acc_model = history.history['accuracy']\n","val_accuracy = history.history['val_accuracy']\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs = range(len(acc_model))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":49,"status":"ok","timestamp":1671378380982,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"DfabKL5BwoEz","outputId":"c052d6dc-7b05-4c3b-f9ee-d749079e6081"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(epochs, acc_model, 'r', label = 'Training Accuracy')\n","plt.plot(epochs, val_accuracy, 'b', label = 'Validation Accuracy')\n","plt.title('Training and Validation Accuracy')\n","plt.legend(loc = 'best')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1647,"status":"ok","timestamp":1671378382612,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"6srW_nWTxWCz","outputId":"a4d6754a-fb8c-4ff2-82f9-ebb3cd89d52e"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(epochs, loss, 'r', label = 'Training Loss')\n","plt.plot(epochs, val_loss, 'b', label = 'Validation Loss')\n","plt.title('Training and Validation Loss')\n","plt.legend(loc = 'best')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"EqyaBMPaHpQD"},"source":["## Accuracy"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":27697,"status":"ok","timestamp":1671378410292,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"0JPX7d2MHt-9","outputId":"f98cb852-5e61-41c3-fa91-116276bba311"},"outputs":[{"name":"stdout","output_type":"stream","text":["26/26 [==============================] - 28s 1s/step - loss: 0.0779 - accuracy: 0.9780\n"]},{"data":{"text/plain":["[0.07787813246250153, 0.9780219793319702]"]},"execution_count":47,"metadata":{},"output_type":"execute_result"}],"source":["akurasi = model.evaluate(val_generator)\n","akurasi"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":50,"status":"ok","timestamp":1671378410293,"user":{"displayName":"Wesley Purnomo","userId":"14823478138298484417"},"user_tz":-420},"id":"Xb0ySGaL8638","outputId":"3cd30817-d393-44a8-dbcd-7249e3378288"},"outputs":[{"name":"stdout","output_type":"stream","text":["97.80219793319702\n"]}],"source":["print(akurasi[1]*100)"]},{"cell_type":"markdown","metadata":{"id":"T9He08EoIBuG"},"source":["## Making Prediction"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MvaWYd0Yk78d"},"outputs":[],"source":["%matplotlib inline\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from google.colab import files\n","import keras.utils as image"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":39},"id":"PVaGgOk4IL-G"},"outputs":[{"data":{"text/html":["\n","     \u003cinput type=\"file\" id=\"files-ec830fef-2656-4dff-bb41-6cded48925bd\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" /\u003e\n","     \u003coutput id=\"result-ec830fef-2656-4dff-bb41-6cded48925bd\"\u003e\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      \u003c/output\u003e\n","      \u003cscript\u003e// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) =\u003e {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable\u003c!Object\u003e} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) =\u003e {\n","    inputElement.addEventListener('change', (e) =\u003e {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) =\u003e {\n","    cancel.onclick = () =\u003e {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) =\u003e {\n","      const reader = new FileReader();\n","      reader.onload = (e) =\u003e {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position \u003c fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","\u003c/script\u003e "],"text/plain":["\u003cIPython.core.display.HTML object\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["uploaded = files.upload()\n","\n","for fn in uploaded.keys():\n"," \n","  # predicting images\n","  path = '/content/' + fn\n","  img = image.load_img(path, target_size=(256, 256))\n","  imgplot = plt.imshow(img)\n","  x = image.img_to_array(img)\n","  plt.imshow(x/255.)\n","  x = np.expand_dims(x, axis=0)\n","  images = np.vstack([x])\n","  classes = model.predict(images, batch_size=100)\n","  print(fn)\n","\n","  class_list = os.listdir(train_dir)\n","  \n","  for j in range(42):\n","    if classes[0][j] == 1. :\n","      print('This Image belongs to class', class_list[j])\n","      break"]}],"metadata":{"colab":{"name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}